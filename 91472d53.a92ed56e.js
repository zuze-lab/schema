/*! For license information please see 91472d53.a92ed56e.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{112:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return b}));var a=n(1),r=n(6),i=(n(0),n(122)),c=n(124),s={id:"conditions",title:"Conditions",sidebar_label:"Conditions"},o={id:"conditions",title:"Conditions",description:"import { AstFn, ZuzeTabs } from '../src/examples/tabs';",source:"@site/docs/conditions.md",permalink:"/schema/docs/conditions",editUrl:"https://github.com/zuze-lab/schema/edit/master/website/docs/conditions.md",sidebar_label:"Conditions",sidebar:"someSidebar",previous:{title:"Validating",permalink:"/schema/docs/validating"},next:{title:"Extending",permalink:"/schema/docs/extending"}},l=[{value:"Creating Conditions",id:"creating-conditions",children:[{value:"Functional",id:"functional",children:[]},{value:"AST Syntax",id:"ast-syntax",children:[]}]},{value:"Refs",id:"refs",children:[{value:"Sibling",id:"sibling",children:[]},{value:"Context",id:"context",children:[]}]}],d={rightToc:l};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Conditions are arguably the most powerful part of ",Object(i.b)("strong",{parentName:"p"},"@zuze/schema"),". Some methods to handle conditional validations is present in virtually all schemas, but ",Object(i.b)("strong",{parentName:"p"},"@zuze/schema")," aims to to boil complicated conditional logic when it comes to schema validation down to a very simple and intuitive API (especially via the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/schema/docs/ast#ASTCondition"}),"AST"),")"),Object(i.b)("p",null,"Schemas can be conditional based on two properties, "),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"fields somewhere in the value being validated or"),Object(i.b)("li",{parentName:"ol"},"context.")),Object(i.b)("p",null,"Both of which are accessible via ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#refs"}),"refs")),Object(i.b)("h2",{id:"creating-conditions"},"Creating Conditions"),Object(i.b)("p",null,"There are multiple supported syntaxes to create conditions, almost all of which are based on a WTO (when-then-otherwise) concept. Arguably the easiest to understand is ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/schema/docs/ast#conditions"}),"AST")," format."),Object(i.b)("h3",{id:"functional"},"Functional"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"when")," can accept two arguments, the first is a string (or an array of strings) and the second is a function that accepts the resolved values of the specified dependencies and the original schema."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const conditional = string(\n    tests(required()),\n    conditions(when('fieldA', (fieldA, schema) => {\n        return fieldA >= 10 ? schema : extend(schema,tests(min(20)))\n    }))\n)\n\nconst schema = object({c:conditional})\n\nisValidSync(schema, {fieldA: 10, c: 19}); // true\nisValidSync(schema, {fieldA: 8, c: 19}); // false\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// array of dependencies\nconst conditional = string(\n    tests(required()),\n    conditions(when(['fieldA','fieldB'], (fieldA, fieldB, schema) => { ... }))\n)\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"when")," can also accept an object format as it's second argument"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// then or otherwise do not both need to specified, but at least one of them is required\n\nconst conditional = string(\n    tests(required()),\n    conditions(when('fieldA', {\n        is: fieldA => fieldA >= 10,\n        otherwise: tests(min(20))\n    }))\n)\n\nconst schema = object({c:conditional})\n\nisValidSync(schema, {fieldA: 10, c: 19}); // false\nisValidSync(schema, {fieldA: 8, c: 19}); // true\n")),Object(i.b)("h3",{id:"ast-syntax"},"AST Syntax"),Object(i.b)("p",null,"The AIM of AST syntax is to be extremely readable:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const conditional = createSchema({\n    schema: 'string',\n    tests: ['required'],\n    conditions: [\n        {\n            // if the value at fieldA does not pass these validators\n            when: { fieldA: { tests: [['min',10]] } },\n            // ... add in the following AST schema definition\n            otherwise: { tests: [['min',20]] }\n        }\n    ]\n});\n\nisValidSync(schema, {fieldA: 10, c: 19}); // false\nisValidSync(schema, {fieldA: 8, c: 19}); // true\n\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"conditions")," is an array and you can create as many conditions as you need. They will be evaluated in the order they were added to the SchemaDefinition."),Object(i.b)("h2",{id:"refs"},"Refs"),Object(i.b)("p",null,"A ref (i.e. reference) is a pointer to a sibling/ancestor in the value that is being validated or a value from context. They are used in ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#validators.md"}),"validators")," (where supported) and to resolve conditional schemas. "),Object(i.b)("p",null,"Refs are also accessed via the path notation using ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.npmjs.com/package/property-expr#getterexpression--safeaccess-"}),"getter")," from ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.npmjs.com/package/property-expr"}),"property-expr")),Object(i.b)(c.a,{mdxType:"AstFn"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"{\n    schema: 'string',\n    tests: [['is', { ref: '$ctx.prop' }]]\n}\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"string(tests(is(ref('$ctx.prop'))));\n"))),Object(i.b)("h3",{id:"sibling"},"Sibling"),Object(i.b)("p",null,"Sibling references are accessed by specifying the object property."),Object(i.b)(c.a,{mdxType:"AstFn"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"{\n    schema: 'object',\n    shape: {\n        fieldA: {\n            tests: [['oneOf', [{ ref: 'fieldB' }, { ref: 'fieldC' }]]]\n        },\n        fieldB: { schema: 'string' },\n        fieldC: {\n            schema: 'object',\n            shape: {\n                fieldD: { schema: 'string' }\n            }\n        }\n    }\n}\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"object({\n    fieldA: mixed(tests(oneOf([\n        ref('fieldB'),\n        ref('fieldC.fieldD')\n    ]))),\n    fieldB: string(),\n    fieldC: object({\n        fieldD: string()\n    })\n})\n"))),Object(i.b)("h3",{id:"context"},"Context"),Object(i.b)("p",null,"Context can also be used to resolve conditions. Context is accessed using a special prefix (",Object(i.b)("inlineCode",{parentName:"p"},"$")," by default, but this can be changed by setting the ",Object(i.b)("inlineCode",{parentName:"p"},"contextPrefix")," option when casting/validating a schema). "),Object(i.b)(c.a,{mdxType:"AstFn"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"{\n    schema: 'string',\n    conditions: [\n        {\n            when: { '$ctx.prop': { tests: [['is',5]] } },\n            then: { tests: [['min',5]] },\n            otherwise: { tests: [['min', {ref:'$ctx.otherProp'}]]}\n        }\n    ]\n}\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"string(\n    conditions(\n        when('$ctx.prop',{\n            is:5,\n            then: tests(min(5)),\n            otherwise: tests(min(ref('$ctx.otherProp')))\n        })\n    )\n)\n"))))}b.isMDXComponent=!0},121:function(e,t,n){var a;!function(){"use strict";var n={}.hasOwnProperty;function r(){for(var e=[],t=0;t<arguments.length;t++){var a=arguments[t];if(a){var i=typeof a;if("string"===i||"number"===i)e.push(a);else if(Array.isArray(a)&&a.length){var c=r.apply(null,a);c&&e.push(c)}else if("object"===i)for(var s in a)n.call(a,s)&&a[s]&&e.push(s)}}return e.join(" ")}e.exports?(r.default=r,e.exports=r):void 0===(a=function(){return r}.apply(t,[]))||(e.exports=a)}()},122:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),d=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s({},t,{},e)),n},b=function(e){var t=d(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),b=d(n),u=a,m=b["".concat(c,".").concat(u)]||b[u]||p[u]||i;return n?r.a.createElement(m,s({ref:t},l,{components:n})):r.a.createElement(m,s({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,c=new Array(i);c[0]=u;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,c[1]=s;for(var l=2;l<i;l++)c[l]=n[l];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},124:function(e,t,n){"use strict";n.d(t,"b",(function(){return u})),n.d(t,"a",(function(){return m}));var a=n(0),r=n.n(a),i=n(121),c=n.n(i),s=n(93),o=n.n(s);const l=37,d=39;var b=function(e){const{block:t,children:n,defaultValue:i,values:s}=e,[b,p]=Object(a.useState)(i),u=[];return r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:c()("tabs",{"tabs--block":t})},s.map(({value:e,label:t})=>r.a.createElement("li",{role:"tab",tabIndex:"0","aria-selected":b===e,className:c()("tab-item",o.a.tabItem,{"tab-item--active":b===e}),key:e,ref:e=>u.push(e),onKeyDown:e=>((e,t,n)=>{switch(n.keyCode){case d:((e,t)=>{const n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()})(e,t);break;case l:((e,t)=>{const n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()})(e,t)}})(u,e.target,e),onFocus:()=>p(e),onClick:()=>p(e)},t))),r.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},a.Children.toArray(n).filter(e=>e.props.value===b)[0]))};var p=function(e){return r.a.createElement("div",null,e.children)};n(122);const u=({children:e,tabs:t,default:n})=>r.a.createElement(b,{defaultValue:n||t[0],values:t.map(e=>({label:e,value:e}))},t.map((t,n)=>r.a.createElement(p,{key:t,value:t},e[n]))),m=({children:e,link:t})=>r.a.createElement(r.a.Fragment,null,r.a.createElement(u,{tabs:["ast","functional"]},e),t&&r.a.createElement(r.a.Fragment,null,r.a.createElement("a",{target:"_blank",href:t},"Try it on CodeSandbox!"),r.a.createElement("hr",null),r.a.createElement("br",null)))}}]);