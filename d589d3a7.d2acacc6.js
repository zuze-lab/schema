(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{109:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return j})),a.d(t,"metadata",(function(){return O})),a.d(t,"rightToc",(function(){return w})),a.d(t,"default",(function(){return y}));var n=a(1),r=a(7),s=a(0),c=a.n(s),i=a(116),o=(a(134),a(112)),l=a.n(o),u=a(107),b=a.n(u);const m=37,h=39;var d=function(e){const{block:t,children:a,defaultValue:n,values:r}=e,[i,o]=Object(s.useState)(n),u=[];return c.a.createElement("div",null,c.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:l()("tabs",{"tabs--block":t})},r.map(({value:e,label:t})=>c.a.createElement("li",{role:"tab",tabIndex:"0","aria-selected":i===e,className:l()("tab-item",b.a.tabItem,{"tab-item--active":i===e}),key:e,ref:e=>u.push(e),onKeyDown:e=>((e,t,a)=>{switch(a.keyCode){case h:((e,t)=>{const a=e.indexOf(t)+1;e[a]?e[a].focus():e[0].focus()})(e,t);break;case m:((e,t)=>{const a=e.indexOf(t)-1;e[a]?e[a].focus():e[e.length-1].focus()})(e,t)}})(u,e.target,e),onFocus:()=>o(e),onClick:()=>o(e)},t))),c.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},s.Children.toArray(a).filter(e=>e.props.value===i)[0]))};var p=function(e){return c.a.createElement("div",null,e.children)},g=function(e){var t=e.children,a=e.tabs,n=e.default;return c.a.createElement(d,{defaultValue:n||a[0],values:a.map((function(e){return{label:e,value:e}}))},a.map((function(e,a){return c.a.createElement(p,{key:e,value:e},t[a])})))},f=function(e){var t=e.children,a=e.link;return c.a.createElement(c.a.Fragment,null,c.a.createElement(g,{tabs:["ast","functional"]},t),a&&c.a.createElement("a",{href:a},"Try it on CodeSandbox!"))},j={id:"getting-started",title:"Getting Started",sidebar_label:"Getting Started"},O={id:"getting-started",title:"Getting Started",description:"import { AstFn, ZuzeTabs } from '../src/examples/tabs';",source:"@site/docs/getting-started.md",permalink:"/schema/docs/getting-started",editUrl:"https://github.com/zuze-lab/schema/edit/master/website/docs/getting-started.md",sidebar_label:"Getting Started",sidebar:"someSidebar"},w=[{value:"Forward",id:"forward",children:[]},{value:"Installation",id:"installation",children:[]},{value:"Creating a Schema",id:"creating-a-schema",children:[]}],v={rightToc:w};function y(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},v,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"forward"},"Forward"),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"@zuze/schema")," was created out of love and admiration for projects like ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/hapijs/joi"}),"joi"),", ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/jquense/yup"}),"yup"),", and ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/epoberezkin/ajv"}),"ajv")," which are all schema validators. Each package brings it's own strengths. The strength (I hope) that ",Object(i.b)("inlineCode",{parentName:"p"},"@zuze/schema")," brings is that it's fun to use, whether you're somebody who likes to write functional code or somebody who likes to write highly reusable configuration (who doesn't love a some good ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.reddit.com/r/ProgrammerHumor/comments/9fhvyl/writing_yaml/"}),"YAML"),"....but we use JSON.)"),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"@zuze/schema")," is one package that comes in two flavors - ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Functional_programming"}),"functional")," or ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Abstract_syntax_tree"}),"ast"),"."),Object(i.b)("p",null,"Throughout these docs code examples will be presented in tabs in functional and AST form. Pick the one that's right for you and your project!"),Object(i.b)("p",null,"More on that after the set up:"),Object(i.b)("h2",{id:"installation"},"Installation"),Object(i.b)("p",null,"Install @zuze/schema using yarn or npm"),Object(i.b)(g,{tabs:["npm","yarn"],mdxType:"ZuzeTabs"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"npm install @zuze/schema\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"yarn install @zuze/schema\n"))),Object(i.b)("h2",{id:"creating-a-schema"},"Creating a Schema"),Object(i.b)("p",null,"Let's start by creating some very simple schemas:"),Object(i.b)(f,{link:"https://codesandbox.io/s/zuze-schema-getting-started-d8q04",mdxType:"AstFn"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"import { ast } from '@zuze/schema'\n\nconst { matches } = ast;\n\nmatches({ schema: 'string', tests: [['min', 10]] }, 'short'); // false\nmatches({ schema: 'string', tests: [['min', 10]] }, 'this should work'); // true            \n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"import { string, min, tests, isValidSync } from '@zuze/schema'\n\nconst schema = string(tests(min(10)));\n\nisValidSync(schema, 'short'); // false\nisValidSync(schema, 'this should work'); // true            \n"))))}y.isMDXComponent=!0},134:function(e,t,a){"use strict";a(135)("link",(function(e){return function(t){return e(this,"a","href",t)}}))},135:function(e,t,a){var n=a(52),r=a(37),s=a(38),c=/"/g,i=function(e,t,a,n){var r=String(s(e)),i="<"+t;return""!==a&&(i+=" "+a+'="'+String(n).replace(c,"&quot;")+'"'),i+">"+r+"</"+t+">"};e.exports=function(e,t){var a={};a[e]=t(i),n(n.P+n.F*r((function(){var t=""[e]('"');return t!==t.toLowerCase()||t.split('"').length>3})),"String",a)}}}]);