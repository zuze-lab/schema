(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{79:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return s})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return b}));var a=t(3),i=t(7),r=(t(0),t(91)),c=t(95),o={id:"conditions",title:"Conditions",sidebar_label:"Conditions"},s={unversionedId:"conditions",id:"conditions",isDocsHomePage:!1,title:"Conditions",description:"Conditions are arguably the most powerful part of @zuze/schema. Some methods to handle conditional validations is present in virtually all schemas, but @zuze/schema aims to to boil complicated conditional logic when it comes to schema validation down to a very simple and intuitive API (especially via the AST)",source:"@site/docs/conditions.md",slug:"/conditions",permalink:"/schema/docs/conditions",editUrl:"https://github.com/zuze-lab/schema/edit/master/website/docs/conditions.md",version:"current",sidebar_label:"Conditions",sidebar:"someSidebar",previous:{title:"Validating",permalink:"/schema/docs/validating"},next:{title:"Extending",permalink:"/schema/docs/extending"}},l=[{value:"Creating Conditions",id:"creating-conditions",children:[{value:"Functional",id:"functional",children:[]},{value:"AST Syntax",id:"ast-syntax",children:[]}]},{value:"Refs",id:"refs",children:[{value:"Sibling",id:"sibling",children:[]},{value:"Context",id:"context",children:[]},{value:"Relative Refs (!)",id:"relative-refs-",children:[]}]}],d={rightToc:l};function b(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},d,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Conditions are arguably the most powerful part of ",Object(r.b)("strong",{parentName:"p"},"@zuze/schema"),". Some methods to handle conditional validations is present in virtually all schemas, but ",Object(r.b)("strong",{parentName:"p"},"@zuze/schema")," aims to to boil complicated conditional logic when it comes to schema validation down to a very simple and intuitive API (especially via the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/schema/docs/type-reference#ast"}),"AST"),")"),Object(r.b)("p",null,"Schemas can be conditional based on two properties, "),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"fields somewhere in the value being validated or"),Object(r.b)("li",{parentName:"ol"},"context.")),Object(r.b)("p",null,"Both of which are accessible via ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#refs"}),"refs")),Object(r.b)("h2",{id:"creating-conditions"},"Creating Conditions"),Object(r.b)("p",null,"There are multiple supported syntaxes to create conditions, almost all of which are based on a WTO (when-then-otherwise) concept. Arguably the easiest to understand is ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/schema/docs/ast#conditions"}),"AST")," format."),Object(r.b)("h3",{id:"functional"},"Functional"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"when")," can accept two arguments, the first is a string (or an array of strings) and the second is a function that accepts the resolved values of the specified dependencies and the original schema."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const conditional = string(\n    tests(required()),\n    conditions(when('fieldA', (fieldA, schema) => {\n        return fieldA >= 10 ? schema : extend(schema,tests(min(20)))\n    }))\n)\n\nconst schema = object({c:conditional})\n\nisValidSync(schema, {fieldA: 10, c: 19}); // true\nisValidSync(schema, {fieldA: 8, c: 19}); // false\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// array of dependencies\nconst conditional = string(\n    tests(required()),\n    conditions(when(['fieldA','fieldB'], (fieldA, fieldB, schema) => { ... }))\n)\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"when")," can also accept an object format as it's second argument"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// then or otherwise do not both need to specified, but at least one of them is required\n\nconst conditional = string(\n    tests(required()),\n    conditions(when('fieldA', {\n        is: fieldA => fieldA >= 10,\n        otherwise: tests(min(20))\n    }))\n)\n\nconst schema = object({c:conditional})\n\nisValidSync(schema, {fieldA: 10, c: 19}); // false\nisValidSync(schema, {fieldA: 8, c: 19}); // true\n")),Object(r.b)("h3",{id:"ast-syntax"},"AST Syntax"),Object(r.b)("p",null,"The AIM of AST syntax is to be extremely readable:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const conditional = createSchema({\n    schema: 'string',\n    tests: ['required'],\n    conditions: [\n        {\n            // if the value at fieldA does not pass these validators\n            when: { fieldA: { tests: [['min',10]] } },\n            // ... add in the following AST schema definition\n            otherwise: { tests: [['min',20]] }\n        }\n    ]\n});\n\nisValidSync(schema, {fieldA: 10, c: 19}); // false\nisValidSync(schema, {fieldA: 8, c: 19}); // true\n\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"conditions")," is an array and you can create as many conditions as you need. They will be evaluated in the order they were added to the SchemaDefinition."),Object(r.b)("h2",{id:"refs"},"Refs"),Object(r.b)("p",null,"A ref (i.e. reference) is a pointer to a sibling/ancestor in the value that is being validated or a value from context. They are used in ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/schema/docs/validators"}),"validators")," (where supported) and to resolve conditional schemas. "),Object(r.b)("p",null,"Refs are also accessed via the path notation using ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.npmjs.com/package/property-expr#getterexpression--safeaccess-"}),"getter")," from ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.npmjs.com/package/property-expr"}),"property-expr")),Object(r.b)(c.a,{mdxType:"AstFn"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"{\n    schema: 'string',\n    tests: [['is', { ref: '$ctx.prop' }]]\n}\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"string(tests(is(ref('$ctx.prop'))));\n"))),Object(r.b)("h3",{id:"sibling"},"Sibling"),Object(r.b)("p",null,"Sibling references are accessed by specifying the object property."),Object(r.b)(c.a,{mdxType:"AstFn"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"{\n    schema: 'object',\n    shape: {\n        fieldA: {\n            tests: [['oneOf', [{ ref: 'fieldB' }, { ref: 'fieldC' }]]]\n        },\n        fieldB: { schema: 'string' },\n        fieldC: {\n            schema: 'object',\n            shape: {\n                fieldD: { schema: 'string' }\n            }\n        }\n    }\n}\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"object({\n    fieldA: mixed(tests(oneOf([\n        ref('fieldB'),\n        ref('fieldC.fieldD')\n    ]))),\n    fieldB: string(),\n    fieldC: object({\n        fieldD: string()\n    })\n})\n"))),Object(r.b)("h3",{id:"context"},"Context"),Object(r.b)("p",null,"Context can also be used to resolve conditions. Context is accessed using a special prefix (",Object(r.b)("inlineCode",{parentName:"p"},"$")," by default, but this can be changed by setting the ",Object(r.b)("inlineCode",{parentName:"p"},"contextPrefix")," option when casting/validating a schema). "),Object(r.b)(c.a,{mdxType:"AstFn"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"{\n    schema: 'string',\n    conditions: [\n        {\n            when: { '$ctx.prop': { tests: [['is',5]] } },\n            then: { tests: [['min',5]] },\n            otherwise: { tests: [['min', {ref:'$ctx.otherProp'}]]}\n        }\n    ]\n}\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"string(\n    conditions(\n        when('$ctx.prop',{\n            is:5,\n            then: tests(min(5)),\n            otherwise: tests(min(ref('$ctx.otherProp')))\n        })\n    )\n)\n"))),Object(r.b)("h3",{id:"relative-refs-"},"Relative Refs (!)"),Object(r.b)("p",null,"Relative refs allow access to ancestors schemas/values from a child schema. They are defined by prefixing with a ref with a ",Object(r.b)("inlineCode",{parentName:"p"},"."),". Every ",Object(r.b)("inlineCode",{parentName:"p"},"."),' in the prefix goes up "one level" of schema.'),Object(r.b)("p",null,"Casting the below object schema results in the following output:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"{\n    fielda: {\n        field1: { \n            field1: 'bill',\n            field2: 'joe' \n        },\n        field3: { \n            field4: 'joe' \n        }\n    },\n    field5: 'joe'\n}\n")),Object(r.b)(c.a,{mdxType:"AstFn"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"{\n    schema: 'object',\n    shape: {\n        fielda: {\n            schema: 'object',\n            shape: {\n                field1: {\n                    schema: 'object',\n                    shape: {\n                        field1: { default: 'bill' },\n                        field2: { default: { ref: '.field3.field4' } }                        \n                    }\n                },\n                field3: {\n                    schema: 'object',\n                    shape: {\n                        field4: { default: { ref: '..field5' } }\n                    }\n                }\n            }\n        },\n        field5: {\n            default: 'joe'\n        }\n    }\n}\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"object({\n    fielda: object({\n        field1: object({\n        field1: lazy(() => mixed(def('bill'))),\n        field2: conditional(\n            condition('.field3.field4', field => mixed(def(field)))\n        ),\n        }),\n        field3: object({\n        field4: conditional(\n            condition('..field5', field => mixed(def(field)))\n        ),\n        }),\n    }),\n    field5: mixed(def('joe')),\n})\n"))))}b.isMDXComponent=!0},90:function(e,n,t){"use strict";function a(e){var n,t,i="";if("string"==typeof e||"number"==typeof e)i+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=a(e[n]))&&(i&&(i+=" "),i+=t);else for(n in e)e[n]&&(i&&(i+=" "),i+=n);return i}n.a=function(){for(var e,n,t=0,i="";t<arguments.length;)(e=arguments[t++])&&(n=a(e))&&(i&&(i+=" "),i+=n);return i}},91:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return p}));var a=t(0),i=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=i.a.createContext({}),d=function(e){var n=i.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},b=function(e){var n=d(e.components);return i.a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},f=i.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=d(t),f=a,p=b["".concat(c,".").concat(f)]||b[f]||u[f]||r;return t?i.a.createElement(p,o(o({ref:n},l),{},{components:t})):i.a.createElement(p,o({ref:n},l))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,c=new Array(r);c[0]=f;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,c[1]=o;for(var l=2;l<r;l++)c[l]=t[l];return i.a.createElement.apply(null,c)}return i.a.createElement.apply(null,t)}f.displayName="MDXCreateElement"},93:function(e,n,t){"use strict";var a=t(0),i=t(94);n.a=function(){var e=Object(a.useContext)(i.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},94:function(e,n,t){"use strict";var a=t(0),i=Object(a.createContext)(void 0);n.a=i},95:function(e,n,t){"use strict";t.d(n,"b",(function(){return p})),t.d(n,"a",(function(){return m}));var a=t(0),i=t.n(a),r=t(93),c=t(90),o=t(53),s=t.n(o),l=37,d=39;var b=function(e){var n=e.lazy,t=e.block,o=e.children,b=e.defaultValue,u=e.values,f=e.groupId,p=e.className,m=Object(r.a)(),h=m.tabGroupChoices,j=m.setTabGroupChoices,O=Object(a.useState)(b),g=O[0],v=O[1];if(null!=f){var y=h[f];null!=y&&y!==g&&u.some((function(e){return e.value===y}))&&v(y)}var w=function(e){v(e),null!=f&&j(f,e)},x=[];return i.a.createElement("div",null,i.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(c.a)("tabs",{"tabs--block":t},p)},u.map((function(e){var n=e.value,t=e.label;return i.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":g===n,className:Object(c.a)("tabs__item",s.a.tabItem,{"tabs__item--active":g===n}),key:n,ref:function(e){return x.push(e)},onKeyDown:function(e){!function(e,n,t){switch(t.keyCode){case d:!function(e,n){var t=e.indexOf(n)+1;e[t]?e[t].focus():e[0].focus()}(e,n);break;case l:!function(e,n){var t=e.indexOf(n)-1;e[t]?e[t].focus():e[e.length-1].focus()}(e,n)}}(x,e.target,e)},onFocus:function(){return w(n)},onClick:function(){w(n)}},t)}))),n?Object(a.cloneElement)(o.filter((function(e){return e.props.value===g}))[0],{className:"margin-vert--md"}):i.a.createElement("div",{className:"margin-vert--md"},o.map((function(e,n){return Object(a.cloneElement)(e,{key:n,hidden:e.props.value!==g})}))))},u=t(3);var f=function(e){var n=e.children,t=e.hidden,a=e.className;return i.a.createElement("div",Object(u.a)({role:"tabpanel"},{hidden:t,className:a}),n)},p=(t(91),function(e){var n=e.children,t=e.tabs,a=e.default;return i.a.createElement(b,{defaultValue:a||t[0],values:t.map((function(e){return{label:e,value:e}}))},t.map((function(e,t){return i.a.createElement(f,{key:e,value:e},n[t])})))}),m=function(e){var n=e.children,t=e.link;return i.a.createElement(i.a.Fragment,null,i.a.createElement(p,{tabs:["ast","functional"]},n),t&&i.a.createElement(i.a.Fragment,null,i.a.createElement("a",{target:"_blank",href:t},"Try it on CodeSandbox!"),i.a.createElement("hr",null),i.a.createElement("br",null)))}}}]);